// key constants (should be done automagically)

const KEY_ESCAPE =         0x01;
const KEY_1      =         0x02;
const KEY_2      =         0x03;
const KEY_3      =         0x04;
const KEY_4      =         0x05;
const KEY_5      =         0x06;
const KEY_6      =         0x07;
const KEY_7      =         0x08;
const KEY_8      =         0x09;
const KEY_9      =         0x0A;
const KEY_0      =         0x0B;
const KEY_MINUS  =         0x0C ;   /* - on main keyboard */
const KEY_EQUALS =         0x0D;
const KEY_BACK   =         0x0E ;   /* backspace */
const KEY_TAB    =         0x0F;
const KEY_Q      =         0x10;
const KEY_W      =         0x11;
const KEY_E      =         0x12;
const KEY_R      =         0x13;
const KEY_T      =         0x14;
const KEY_Y      =         0x15;
const KEY_U      =         0x16;
const KEY_I      =         0x17;
const KEY_O      =         0x18;
const KEY_P      =         0x19;
const KEY_LBRACKET =       0x1A;
const KEY_RBRACKET =       0x1B;
const KEY_RETURN   =       0x1C ;   /* Enter on main keyboard */
const KEY_LCONTROL =       0x1D;
const KEY_A        =       0x1E;
const KEY_S        =       0x1F;
const KEY_D        =       0x20;
const KEY_F        =       0x21;
const KEY_G        =       0x22;
const KEY_H        =       0x23;
const KEY_J        =       0x24;
const KEY_K        =       0x25;
const KEY_L        =       0x26;
const KEY_SEMICOLON=       0x27;
const KEY_APOSTROPHE =     0x28;
const KEY_GRAVE      =     0x29 ;   /* accent grave */
const KEY_LSHIFT     =     0x2A;
const KEY_BACKSLASH  =     0x2B;
const KEY_Z          =     0x2C;
const KEY_X          =     0x2D;
const KEY_C          =     0x2E;
const KEY_V          =     0x2F;
const KEY_B          =     0x30;
const KEY_N          =     0x31;
const KEY_M          =     0x32;
const KEY_COMMA      =     0x33;
const KEY_PERIOD     =     0x34 ;   /* . on main keyboard */
const KEY_SLASH      =     0x35  ;  /* / on main keyboard */
const KEY_RSHIFT     =     0x36;
const KEY_MULTIPLY   =     0x37 ;   /* * on numeric keypad */
const KEY_LMENU      =     0x38  ;  /* left Alt */
const KEY_SPACE      =     0x39;
const KEY_CAPITAL    =     0x3A;
const KEY_F1         =     0x3B;
const KEY_F2         =     0x3C;
const KEY_F3        =      0x3D;
const KEY_F4        =      0x3E;
const KEY_F5        =      0x3F;
const KEY_F6        =      0x40;
const KEY_F7        =      0x41;
const KEY_F8        =      0x42;
const KEY_F9        =      0x43;
const KEY_F10       =      0x44;
const KEY_NUMLOCK   =      0x45;
const KEY_SCROLL    =      0x46 ;   /* Scroll Lock */
const KEY_NUMPAD7   =      0x47;
const KEY_NUMPAD8   =      0x48;
const KEY_NUMPAD9   =      0x49;
const KEY_SUBTRACT  =      0x4A ;   /* - on numeric keypad */
const KEY_NUMPAD4   =      0x4B;
const KEY_NUMPAD5   =      0x4C;
const KEY_NUMPAD6   =      0x4D;
const KEY_ADD       =      0x4E ;   /* + on numeric keypad */
const KEY_NUMPAD1   =      0x4F;
const KEY_NUMPAD2   =      0x50;
const KEY_NUMPAD3   =      0x51;
const KEY_NUMPAD0   =      0x52;
const KEY_DECIMAL   =      0x53;   /* . on numeric keypad */
const KEY_OEM_102   =      0x56;   /* <> or \| on RT 102-key keyboard (Non-U.S.) */
const KEY_F11       =      0x57;
const KEY_F12       =      0x58;
const KEY_F13       =      0x64 ;   /*                     (NEC PC98) */
const KEY_F14       =      0x65  ;  /*                     (NEC PC98) */
const KEY_F15       =      0x66   ; /*                     (NEC PC98) */
const KEY_KANA      =      0x70;    /* (Japanese keyboard)            */
const KEY_ABNT_C1   =      0x73;    /* /? on Brazilian keyboard */
const KEY_CONVERT   =      0x79;    /* (Japanese keyboard)            */
const KEY_NOCONVERT =      0x7B;    /* (Japanese keyboard)            */
const KEY_YEN       =      0x7D;    /* (Japanese keyboard)            */
const KEY_ABNT_C2   =      0x7E;    /* Numpad . on Brazilian keyboard */
const KEY_NUMPADEQUALS =   0x8D;    /* = on numeric keypad (NEC PC98) */
const KEY_PREVTRACK    =   0x90;    /* Previous Track (KEY_CIRCUMFLEX on Japanese keyboard) */
const KEY_AT           =   0x91;    /*                     (NEC PC98) */
const KEY_COLON        =   0x92;    /*                     (NEC PC98) */
const KEY_UNDERLINE    =   0x93;    /*                     (NEC PC98) */
const KEY_KANJI        =   0x94;    /* (Japanese keyboard)            */
const KEY_STOP         =   0x95;    /*                     (NEC PC98) */
const KEY_AX           =   0x96;    /*                     (Japan AX) */
const KEY_UNLABELED    =   0x97;    /*                        (J3100) */
const KEY_NEXTTRACK    =   0x99;    /* Next Track */
const KEY_NUMPADENTER  =   0x9C;    /* Enter on numeric keypad */
const KEY_RCONTROL     =   0x9D;
const KEY_MUTE         =   0xA0;    /* Mute */
const KEY_CALCULATOR   =   0xA1;    /* Calculator */
const KEY_PLAYPAUSE    =   0xA2;    /* Play / Pause */
const KEY_MEDIASTOP    =   0xA4;    /* Media Stop */
const KEY_VOLUMEDOWN   =   0xAE;    /* Volume - */
const KEY_VOLUMEUP     =   0xB0;    /* Volume + */
const KEY_WEBHOME      =   0xB2;    /* Web home */
const KEY_NUMPADCOMMA  =   0xB3;    /* , on numeric keypad (NEC PC98) */
const KEY_DIVIDE       =   0xB5;    /* / on numeric keypad */
const KEY_SYSRQ        =   0xB7;
const KEY_RMENU        =   0xB8;    /* right Alt */
const KEY_PAUSE        =   0xC5;    /* Pause */
const KEY_HOME         =   0xC7;    /* Home on arrow keypad */
const KEY_UP           =   0xC8;    /* UpArrow on arrow keypad */
const KEY_PRIOR        =   0xC9;   /* PgUp on arrow keypad */
const KEY_LEFT         =   0xCB;    /* LeftArrow on arrow keypad */
const KEY_RIGHT        =   0xCD ;   /* RightArrow on arrow keypad */
const KEY_END          =   0xCF ;   /* End on arrow keypad */
const KEY_DOWN         =   0xD0 ;   /* DownArrow on arrow keypad */
const KEY_NEXT         =   0xD1 ;   /* PgDn on arrow keypad */
const KEY_INSERT       =   0xD2 ;   /* Insert on arrow keypad */
const KEY_DELETE       =   0xD3 ;   /* Delete on arrow keypad */
const KEY_LWIN         =   0xDB ;   /* Left Windows key */
const KEY_RWIN         =   0xDC ;   /* Right Windows key */
const KEY_APPS         =   0xDD ;   /* AppMenu key */
const KEY_POWER        =   0xDE ;   /* System Power */
const KEY_SLEEP        =   0xDF ;   /* System Sleep */
const KEY_WAKE         =   0xE3 ;   /* System Wake */
const KEY_WEBSEARCH    =   0xE5 ;   /* Web Search */
const KEY_WEBFAVORITES=    0xE6 ;   /* Web Favorites */
const KEY_WEBREFRESH   =   0xE7 ;   /* Web Refresh */
const KEY_WEBSTOP      =   0xE8 ;   /* Web Stop */
const KEY_WEBFORWARD   =   0xE9 ;   /* Web Forward */
const KEY_WEBBACK      =   0xEA ;   /* Web Back */
const KEY_MYCOMPUTER   =   0xEB ;   /* My Computer */
const KEY_MAIL         =   0xEC ;   /* Mail */
const KEY_MEDIASELECT  =   0xED ;   /* Media Select */
const BUTTON_0		   =   0xF0 ;
const BUTTON_1		   =   0xF1 ;
const BUTTON_2		   =   0xF2 ;
const BUTTON_3		   =   0xF3 ;
const MWHEELUP		   =   0xF4 ;
const MWHEELDN         =   0xF5 ;

/*
 *  Alternate names for keys, to facilitate transition from DOS.
 */
const KEY_BACKSPACE    =   KEY_BACK;            /* backspace */
const KEY_NUMPADSTAR   =   KEY_MULTIPLY;        /* * on numeric keypad */
const KEY_LALT         =   KEY_LMENU   ;        /* left Alt */
const KEY_CAPSLOCK     =   KEY_CAPITAL ;        /* CapsLock */
const KEY_NUMPADMINUS  =   KEY_SUBTRACT;        /* - on numeric keypad */
const KEY_NUMPADPLUS   =   KEY_ADD     ;        /* + on numeric keypad */
const KEY_NUMPADPERIOD =   KEY_DECIMAL ;        /* . on numeric keypad */
const KEY_NUMPADSLASH  =   KEY_DIVIDE  ;        /* / on numeric keypad */
const KEY_RALT         =   KEY_RMENU   ;        /* right Alt */
const KEY_UPARROW      =   KEY_UP      ;        /* UpArrow on arrow keypad */
const KEY_PGUP         =   KEY_PRIOR   ;        /* PgUp on arrow keypad */
const KEY_LEFTARROW    =   KEY_LEFT    ;        /* LeftArrow on arrow keypad */
const KEY_RIGHTARROW   =   KEY_RIGHT   ;        /* RightArrow on arrow keypad */
const KEY_DOWNARROW    =   KEY_DOWN    ;        /* DownArrow on arrow keypad */
const KEY_PGDN         =   KEY_NEXT    ;        /* PgDn on arrow keypad */

/*
 *  Key States
 */
const STATE_PRESSED = 0;
const STATE_DOWN = 1;
const STATE_RELEASED = 2;

const 	NX_VISUALIZATION_SCALE = 9;

const	NX_VISUALIZE_WORLD_AXES = 10;
const	NX_VISUALIZE_BODY_AXES = 11;
const	NX_VISUALIZE_BODY_MASS_AXES = 12;
const	NX_VISUALIZE_BODY_LIN_VELOCITY = 13;
const	NX_VISUALIZE_BODY_ANG_VELOCITY = 14;
const	NX_VISUALIZE_BODY_LIN_MOMENTUM = 15;
const	NX_VISUALIZE_BODY_ANG_MOMENTUM = 16;
const	NX_VISUALIZE_BODY_LIN_ACCEL = 17;
const	NX_VISUALIZE_BODY_ANG_ACCEL = 18;
const	NX_VISUALIZE_BODY_LIN_FORCE = 19;
const	NX_VISUALIZE_BODY_ANG_FORCE = 20;
const	NX_VISUALIZE_BODY_REDUCED = 21;
const	NX_VISUALIZE_BODY_JOINT_GROUPS = 22;
const	NX_VISUALIZE_BODY_CONTACT_LIST = 23;
const	NX_VISUALIZE_BODY_JOINT_LIST = 24;
const	NX_VISUALIZE_BODY_DAMPING = 25;
const	NX_VISUALIZE_BODY_SLEEP = 26;
const	NX_VISUALIZE_JOINT_LOCAL_AXES = 27;
const	NX_VISUALIZE_JOINT_WORLD_AXES = 28;
const	NX_VISUALIZE_JOINT_LIMITS = 29;
const	NX_VISUALIZE_JOINT_ERROR = 30;
const	NX_VISUALIZE_JOINT_FORCE = 31;
const	NX_VISUALIZE_JOINT_REDUCED = 32;
const	NX_VISUALIZE_CONTACT_POINT = 33;
const	NX_VISUALIZE_CONTACT_NORMAL = 34;
const	NX_VISUALIZE_CONTACT_ERROR = 35;
const	NX_VISUALIZE_CONTACT_FORCE = 36;
const	NX_VISUALIZE_ACTOR_AXES = 37;
const	NX_VISUALIZE_COLLISION_AABBS = 38;
const	NX_VISUALIZE_COLLISION_SHAPES = 39;
const	NX_VISUALIZE_COLLISION_AXES = 40;
const	NX_VISUALIZE_COLLISION_COMPOUNDS = 41;
const	NX_VISUALIZE_COLLISION_VNORMALS = 42;
const	NX_VISUALIZE_COLLISION_FNORMALS = 43;
const	NX_VISUALIZE_COLLISION_EDGES = 44;
const	NX_VISUALIZE_COLLISION_SPHERES = 45;
const	NX_VISUALIZE_COLLISION_SAP = 46;
const	NX_VISUALIZE_COLLISION_STATIC = 47;
const	NX_VISUALIZE_COLLISION_DYNAMIC = 48;
const	NX_VISUALIZE_COLLISION_FREE = 49;
const	NX_VISUALIZE_COLLISION_CCD = 50;	
const	NX_VISUALIZE_COLLISION_SKELETONS = 51;
const	NX_VISUALIZE_FLUID_EMITTERS = 52;
const	NX_VISUALIZE_FLUID_POSITION = 53;
const	NX_VISUALIZE_FLUID_VELOCITY = 54;
const	NX_VISUALIZE_FLUID_KERNEL_RADIUS = 55;
const	NX_VISUALIZE_FLUID_BOUNDS = 56;
const	NX_VISUALIZE_FLUID_PACKETS = 57;
const	NX_VISUALIZE_FLUID_MOTION_LIMIT = 58;
const	NX_VISUALIZE_FLUID_DYN_COLLISION = 59;
const	NX_VISUALIZE_FLUID_STC_COLLISION = 60;
const	NX_VISUALIZE_FLUID_MESH_PACKETS = 61;
const	NX_VISUALIZE_FLUID_DRAINS = 62;
const	NX_VISUALIZE_FLUID_PACKET_DATA = 90;
const	NX_VISUALIZE_CLOTH_MESH = 63;
const	NX_VISUALIZE_CLOTH_COLLISIONS = 64;
const	NX_VISUALIZE_CLOTH_SELFCOLLISIONS = 65;
const	NX_VISUALIZE_CLOTH_WORKPACKETS = 66;
const	NX_VISUALIZE_CLOTH_SLEEP = 67;
const	NX_VISUALIZE_CLOTH_SLEEP_VERTEX = 94;
const	NX_VISUALIZE_CLOTH_TEARABLE_VERTICES = 80;
const	NX_VISUALIZE_CLOTH_TEARING = 81;
const	NX_VISUALIZE_CLOTH_ATTACHMENT = 82;
const	NX_VISUALIZE_CLOTH_VALIDBOUNDS = 92;
const	NX_VISUALIZE_SOFTBODY_MESH = 83;
const	NX_VISUALIZE_SOFTBODY_COLLISIONS = 84;
const	NX_VISUALIZE_SOFTBODY_WORKPACKETS = 85;
const	NX_VISUALIZE_SOFTBODY_SLEEP = 86;
const	NX_VISUALIZE_SOFTBODY_SLEEP_VERTEX = 95;
const	NX_VISUALIZE_SOFTBODY_TEARABLE_VERTICES = 87;
const	NX_VISUALIZE_SOFTBODY_TEARING = 88;
const	NX_VISUALIZE_SOFTBODY_ATTACHMENT = 89;
const	NX_VISUALIZE_SOFTBODY_VALIDBOUNDS = 93;
const	NX_VISUALIZE_ACTIVE_VERTICES = 72;
const	NX_VISUALIZE_FORCE_FIELDS = 91;
 
 
const 	NX_FORCE = 0;                   //!< parameter has unit of mass * distance/ time^2, i.e. a force
const 	NX_IMPULSE = 1;                 //!< parameter has unit of mass * distance /time
const 	NX_VELOCITY_CHANGE = 2;			//!< parameter has unit of distance / time, i.e. the effect is mass independent: a velocity change.
const 	NX_SMOOTH_IMPULSE = 3;          //!< same as NX_IMPULSE but the effect is applied over all substeps. Use this for motion controllers that repeatedly apply an impulse.
const 	NX_SMOOTH_VELOCITY_CHANGE = 4;	//!< same as NX_VELOCITY_CHANGE but the effect is applied over all substeps. Use this for motion controllers that repeatedly apply an impulse.
const 	NX_ACCELERATION = 5;				//!< parameter has unit of distance/ time^2, i.e. an acceleration. It gets treated just like a force except the mass is not divided out before integration.

print("Loaded key defines...");