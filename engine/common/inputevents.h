#pragma once

#include "common/event.h"

namespace eXistenZ 
{
	enum KeyState
	{
		KS_PRESSED,		
		KS_RELEASED,	
		KS_CHAR,		// generated by wm_char messages (translated key)
		KS_HELD			// used by binding system
	};

	enum MouseButton
	{
		MB_0,			// left button
		MB_1,			// right button
		MB_2,			// middle button
		MB_UNKNOWN		// unknown
	};

	enum ButtonState
	{
		BS_PRESSED,
		BS_RELEASED,
		BS_HELD,		// used by binding system
		BS_UNKNOWN		// unknown
	};

	struct KeyEventArgs : eventargs
	{
		int key;
		KeyState state;
		unsigned int flags;
		KeyEventArgs(int key, KeyState state, unsigned int flags) : key(key), state(state), flags(flags) {}
	};

	struct MouseMoveEventArgs: eventargs
	{
		int xpos;
		int ypos;
		unsigned int flags;
		MouseMoveEventArgs(int xpos, int ypos, unsigned int flags)
			: xpos(xpos), ypos(ypos), flags(flags) {}
	};

	struct RawMouseMoveEventArgs : eventargs
	{
		int xrel;
		int yrel;
		unsigned int flags;
		RawMouseMoveEventArgs(int xrel, int yrel, unsigned int flags)
			: xrel(xrel), yrel(yrel) {}
	};

	struct MouseButtonEventArgs : eventargs
	{
		MouseButton button;
		ButtonState state;
		int xpos, ypos, flags;	// not sent for raw button events
		MouseButtonEventArgs()
			: button(MB_UNKNOWN), state(BS_UNKNOWN), xpos(0), ypos(0), flags(0) {}
		MouseButtonEventArgs(MouseButton button, ButtonState state)
			: button(button), state(state), xpos(0), ypos(0), flags(0) {}
		MouseButtonEventArgs(MouseButton button, ButtonState state, int xpos, int ypos, int flags)
			: button(button), state(state), xpos(xpos), ypos(ypos), flags(flags) {}
	};
}