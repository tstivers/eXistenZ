#include "precompiled.h"
#include "render/render.h"
#include "render/shapes.h"
#include "render/rendergroup.h"
#include "render/hwbuffer.h"
#include "render/font.h"
#include "texture/texture.h"
#include "texture/material.h"
#include "game/game.h"

#define LINEVERTEXF ( D3DFVF_XYZ | D3DFVF_DIFFUSE )

namespace render
{
	ID3DXLine* D3DXLine = NULL;

	void clipsegments(const D3DXVECTOR3* vertices, int count, D3DCOLOR color);
	CD3DFont* font = NULL;
}

using namespace render;

void render::releaseLine()
{
	if (D3DXLine)
		D3DXLine->Release();
	D3DXLine = NULL;
}

void render::releaseFont()
{
	delete font;
	font = NULL;
}


void render::clipsegments(const D3DXVECTOR3* vertices, int count, D3DCOLOR color)
{
	ASSERT(count > 1);

	D3DXPLANE p;
	D3DXMATRIX m;
	D3DXVECTOR3 start, end, nrm(0, 0, 1.0f);
	D3DXMatrixRotationYawPitchRoll(&m, D3DXToRadian(cam_rot.y), D3DXToRadian(cam_rot.x), D3DXToRadian(cam_rot.z));
	D3DXVec3TransformCoord(&nrm, &nrm, &m);
	D3DXPlaneFromPointNormal(&p, &cam_pos, &nrm);

	bool in_front = false;
	vector<D3DXVECTOR3> output;
	D3DXVECTOR3 last_behind;
	for (int i = 0; i < count; i++)
	{
		if (D3DXPlaneDotCoord(&p, &vertices[i]) >= 0.0)
		{
			if ((!in_front) && i) // transitioning from back to front
			{
				D3DXPlaneIntersectLine(&start, &p, &last_behind, &vertices[i]);
				output.push_back(start + (nrm * 0.1));
			}
			in_front = true;
			output.push_back(vertices[i]);
		}
		else
		{
			if (in_front) // transitioning from front to back
			{
				D3DXPlaneIntersectLine(&end, &p, &output[output.size() - 1], &vertices[i]);
				output.push_back(end + (nrm * 0.1));
				drawLine(&output[0], output.size(), color, false);
				output.clear();
				in_front = false;
			}
			last_behind = vertices[i];
		}
	}

	ASSERT(output.size() != 1);

	if (output.size() > 1)
		drawLine(&output[0], output.size(), color, false);
}

void render::drawLine(const D3DXVECTOR3* vertices, int count, D3DCOLOR color, bool clip)
{
	ASSERT(count > 1);

	if (!D3DXLine)
	{
		HRESULT r = D3DXCreateLine(render::device, &D3DXLine);
		ASSERT(r == D3D_OK);
	}

	if (clip)
		return clipsegments(vertices, count, color);

	D3DXMATRIX m = render::world * render::view * render::projection;
	HRESULT r = D3DXLine->DrawTransform(vertices, count, &m, color);
	ASSERT(r == D3D_OK);
}

void render::drawLines(const D3DXVECTOR3* segments, int count, D3DCOLOR color)
{
	for (int i = 0; i < count; i++)
	{
		drawLine(&segments[i << 1], 2, color);
	}
}

void render::drawLine(const D3DXVECTOR3& start, const D3DXVECTOR3& end, D3DCOLOR color)
{
	D3DXVECTOR3 segments[2];

	segments[0] = start;
	segments[1] = end;
	drawLine(segments, 2, color);
}

void render::drawAABBox(const D3DXVECTOR3* min, const D3DXVECTOR3* max, D3DCOLOR color)
{
	D3DXVECTOR3 segments[24];

	// draw top
	segments[0] = D3DXVECTOR3(min->x, max->y, min->z);
	segments[1] = D3DXVECTOR3(min->x, max->y, max->z);
	segments[2] = D3DXVECTOR3(min->x, max->y, max->z);
	segments[3] = D3DXVECTOR3(max->x, max->y, max->z);
	segments[4] = D3DXVECTOR3(max->x, max->y, max->z);
	segments[5] = D3DXVECTOR3(max->x, max->y, min->z);
	segments[6] = D3DXVECTOR3(max->x, max->y, min->z);
	segments[7] = D3DXVECTOR3(min->x, max->y, min->z);

	// draw bottom
	segments[8] = D3DXVECTOR3(min->x, min->y, min->z);
	segments[9] = D3DXVECTOR3(min->x, min->y, max->z);
	segments[10] = D3DXVECTOR3(min->x, min->y, max->z);
	segments[11] = D3DXVECTOR3(max->x, min->y, max->z);
	segments[12] = D3DXVECTOR3(max->x, min->y, max->z);
	segments[13] = D3DXVECTOR3(max->x, min->y, min->z);
	segments[14] = D3DXVECTOR3(max->x, min->y, min->z);
	segments[15] = D3DXVECTOR3(min->x, min->y, min->z);

	// draw side segments
	segments[16] = D3DXVECTOR3(min->x, max->y, min->z);
	segments[17] = D3DXVECTOR3(min->x, min->y, min->z);
	segments[18] = D3DXVECTOR3(max->x, max->y, min->z);
	segments[19] = D3DXVECTOR3(max->x, min->y, min->z);
	segments[20] = D3DXVECTOR3(max->x, max->y, max->z);
	segments[21] = D3DXVECTOR3(max->x, min->y, max->z);
	segments[22] = D3DXVECTOR3(min->x, max->y, max->z);
	segments[23] = D3DXVECTOR3(min->x, min->y, max->z);

	drawLines(&segments[0], 12, color);
}

#define BOXFVF ( D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_DIFFUSE | D3DFVF_TEX1 | D3DFVF_TEXCOORDSIZE2(0) )

struct BOXVertex
{
	D3DXVECTOR3 pos;
	D3DXVECTOR3	nrm;
	D3DCOLOR	diffuse;
	D3DXVECTOR2 tex1;
} boxVertices[] =
{
	// front
	{D3DXVECTOR3(-0.5f, 0.5f, -0.5f),	D3DXVECTOR3(0, 0, -1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(0.5f, 0.5f, -0.5f),	D3DXVECTOR3(0, 0, -1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(0.5f, -0.5f, -0.5f),	D3DXVECTOR3(0, 0, -1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(-0.5f, -0.5f, -0.5f),	D3DXVECTOR3(0, 0, -1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)},

	// back
	{D3DXVECTOR3(-0.5f, 0.5f, 0.5f),	D3DXVECTOR3(0, 0, 1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(0.5f, 0.5f, 0.5f),		D3DXVECTOR3(0, 0, 1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(0.5f, -0.5f, 0.5f),	D3DXVECTOR3(0, 0, 1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(-0.5f, -0.5f, 0.5f),	D3DXVECTOR3(0, 0, 1), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)},

	// left
	{D3DXVECTOR3(-0.5f, 0.5f, 0.5f),	D3DXVECTOR3(-1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(-0.5f, 0.5f, -0.5f),	D3DXVECTOR3(-1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(-0.5f, -0.5f, -0.5f),	D3DXVECTOR3(-1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(-0.5f, -0.5f, 0.5f),	D3DXVECTOR3(-1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)},

	// right
	{D3DXVECTOR3(0.5f, 0.5f, -0.5f),	D3DXVECTOR3(1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(0.5f, 0.5f, 0.5f),		D3DXVECTOR3(1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(0.5f, -0.5f, 0.5f),	D3DXVECTOR3(1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(0.5f, -0.5f, -0.5f),	D3DXVECTOR3(1, 0, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)},

	// top
	{D3DXVECTOR3(-0.5f, 0.5f, 0.5f),	D3DXVECTOR3(0, 1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(0.5f, 0.5f, 0.5f),		D3DXVECTOR3(0, 1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(0.5f, 0.5f, -0.5f),	D3DXVECTOR3(0, 1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(-0.5f, 0.5f, -0.5f),	D3DXVECTOR3(0, 1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)},

	// bottom
	{D3DXVECTOR3(-0.5f, -0.5f, -0.5f),	D3DXVECTOR3(0, -1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 0)},
	{D3DXVECTOR3(0.5f, -0.5f, -0.5f),	D3DXVECTOR3(0, -1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 0)},
	{D3DXVECTOR3(0.5f, -0.5f, 0.5f),	D3DXVECTOR3(0, -1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(1, 1)},
	{D3DXVECTOR3(-0.5f, -0.5f, 0.5f),	D3DXVECTOR3(0, -1, 0), D3DCOLOR_XRGB(255, 255, 255), D3DXVECTOR2(0, 1)}
};

short boxIndices[] =
{
	0, 1, 2, // front
	2, 3, 0,
	6, 5, 4, // back
	4, 7, 6,
	8, 9, 10, // left
	10, 11, 8,
	12, 13, 14, // right
	14, 15, 12,
	16, 17, 18, // top
	18, 19, 16,
	20, 21, 22, // bottom
	22, 23, 20
};

void render::drawBox(const D3DXVECTOR3& pos, const D3DXQUATERNION& rot, const D3DXVECTOR3& scale, texture::DXTexture* texture, texture::Material* lighting)
{
	static RenderGroup* rg = NULL;
	if (!rg)
	{
		rg = getRenderGroup(BOXFVF, sizeof(boxVertices[0]), 24, 36, false);
		rg->primitivecount = 12;
		rg->type = D3DPT_TRIANGLELIST;
		rg->acquire();
		rg->update(boxVertices, boxIndices);
	}

	D3DXMATRIX transform;
	D3DXMatrixTransformation(&transform, NULL, NULL, &scale, NULL, &rot, &pos);

	rg->texture = texture;
	rg->material = lighting;

	render::drawGroup(rg, &transform);
}

#define SPHEREFVF ( D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | D3DFVF_TEXCOORDSIZE2(0) )

struct SphereVertex
{
	D3DXVECTOR3 pos;
	D3DXVECTOR3	nrm;
	D3DXVECTOR2 tex1;
} sphereVertices[] =
{
	{D3DXVECTOR3(-0.270598, -0.923880, 0.270598),     D3DXVECTOR3(-0.269132, -0.924735, 0.269132),    D3DXVECTOR2(-0.375000, -0.125000)},
	{D3DXVECTOR3(-0.382683, -0.923880, 0.000000),     D3DXVECTOR3(-0.380611, -0.924735, 0.000000),    D3DXVECTOR2(-0.250000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(0.000000, 0.000000)},
	{D3DXVECTOR3(-0.382683, -0.923880, 0.000000),     D3DXVECTOR3(-0.380611, -0.924735, 0.000000),    D3DXVECTOR2(-0.250000, -0.125000)},
	{D3DXVECTOR3(-0.270598, -0.923880, 0.270598),     D3DXVECTOR3(-0.269132, -0.924735, 0.269132),    D3DXVECTOR2(-0.375000, -0.125000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(-0.382683, -0.923880, 0.000000),     D3DXVECTOR3(-0.380611, -0.924735, 0.000000),    D3DXVECTOR2(-0.250000, -0.125000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(-0.270598, 0.923880, 0.270598),      D3DXVECTOR3(-0.269132, 0.924735, 0.269132),     D3DXVECTOR2(-0.375000, -0.875000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.270598, 0.923880, 0.270598),      D3DXVECTOR3(-0.269132, 0.924735, 0.269132),     D3DXVECTOR2(-0.375000, -0.875000)},
	{D3DXVECTOR3(-0.382683, 0.923880, 0.000000),      D3DXVECTOR3(-0.380611, 0.924735, 0.000000),     D3DXVECTOR2(-0.250000, -0.875000)},
	{D3DXVECTOR3(-0.382683, 0.923880, 0.000000),      D3DXVECTOR3(-0.380611, 0.924735, 0.000000),     D3DXVECTOR2(-0.250000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, 0.270598),      D3DXVECTOR3(-0.269132, 0.924735, 0.269132),     D3DXVECTOR2(-0.375000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(0.000000, -1.000000)},
	{D3DXVECTOR3(0.000000, -0.923880, 0.382683),      D3DXVECTOR3(0.000000, -0.924735, 0.380611),     D3DXVECTOR2(-0.500000, -0.125000)},
	{D3DXVECTOR3(-0.270598, -0.923880, 0.270598),     D3DXVECTOR3(-0.269132, -0.924735, 0.269132),    D3DXVECTOR2(-0.375000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(0.000000, 0.000000)},
	{D3DXVECTOR3(-0.270598, -0.923880, 0.270598),     D3DXVECTOR3(-0.269132, -0.924735, 0.269132),    D3DXVECTOR2(-0.375000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.923880, 0.382683),      D3DXVECTOR3(0.000000, -0.924735, 0.380611),     D3DXVECTOR2(-0.500000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(-0.270598, -0.923880, 0.270598),     D3DXVECTOR3(-0.269132, -0.924735, 0.269132),    D3DXVECTOR2(-0.375000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(-0.500000, -0.707107, 0.500000),     D3DXVECTOR3(-0.498494, -0.709230, 0.498494),    D3DXVECTOR2(-0.375000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(-0.653282, -0.382683, 0.653282),     D3DXVECTOR3(-0.652733, -0.384551, 0.652733),    D3DXVECTOR2(-0.375000, -0.375000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(-0.707107, 0.000000, 0.707107),      D3DXVECTOR3(-0.707107, 0.000000, 0.707107),     D3DXVECTOR2(-0.375000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(-0.653282, 0.382683, 0.653282),      D3DXVECTOR3(-0.652733, 0.384551, 0.652733),     D3DXVECTOR2(-0.375000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.923880, 0.382683),       D3DXVECTOR3(0.000000, 0.924735, 0.380611),      D3DXVECTOR2(-0.500000, -0.875000)},
	{D3DXVECTOR3(-0.500000, 0.707107, 0.500000),      D3DXVECTOR3(-0.498494, 0.709230, 0.498494),     D3DXVECTOR2(-0.375000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.923880, 0.382683),       D3DXVECTOR3(0.000000, 0.924735, 0.380611),      D3DXVECTOR2(-0.500000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, 0.270598),      D3DXVECTOR3(-0.269132, 0.924735, 0.269132),     D3DXVECTOR2(-0.375000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, 0.270598),      D3DXVECTOR3(-0.269132, 0.924735, 0.269132),     D3DXVECTOR2(-0.375000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, 0.382683),       D3DXVECTOR3(0.000000, 0.924735, 0.380611),      D3DXVECTOR2(-0.500000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(0.000000, -1.000000)},
	{D3DXVECTOR3(0.270598, -0.923880, 0.270598),      D3DXVECTOR3(0.269132, -0.924735, 0.269132),     D3DXVECTOR2(-0.625000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.923880, 0.382683),      D3DXVECTOR3(0.000000, -0.924735, 0.380611),     D3DXVECTOR2(-0.500000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(-1.000000, 0.000000)},
	{D3DXVECTOR3(0.000000, -0.923880, 0.382683),      D3DXVECTOR3(0.000000, -0.924735, 0.380611),     D3DXVECTOR2(-0.500000, -0.125000)},
	{D3DXVECTOR3(0.270598, -0.923880, 0.270598),      D3DXVECTOR3(0.269132, -0.924735, 0.269132),     D3DXVECTOR2(-0.625000, -0.125000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.923880, 0.382683),      D3DXVECTOR3(0.000000, -0.924735, 0.380611),     D3DXVECTOR2(-0.500000, -0.125000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.707107, 0.707107),      D3DXVECTOR3(0.000000, -0.709230, 0.704977),     D3DXVECTOR2(-0.500000, -0.250000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(0.000000, -0.382683, 0.923880),      D3DXVECTOR3(0.000000, -0.384551, 0.923104),     D3DXVECTOR2(-0.500000, -0.375000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.000000, 1.000000),       D3DXVECTOR3(0.000000, 0.000000, 1.000000),      D3DXVECTOR2(-0.500000, -0.500000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.382683, 0.923880),       D3DXVECTOR3(0.000000, 0.384551, 0.923104),      D3DXVECTOR2(-0.500000, -0.625000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.270598, 0.923880, 0.270598),       D3DXVECTOR3(0.269132, 0.924735, 0.269132),      D3DXVECTOR2(-0.625000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.707107, 0.707107),       D3DXVECTOR3(0.000000, 0.709230, 0.704977),      D3DXVECTOR2(-0.500000, -0.750000)},
	{D3DXVECTOR3(0.270598, 0.923880, 0.270598),       D3DXVECTOR3(0.269132, 0.924735, 0.269132),      D3DXVECTOR2(-0.625000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, 0.382683),       D3DXVECTOR3(0.000000, 0.924735, 0.380611),      D3DXVECTOR2(-0.500000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, 0.382683),       D3DXVECTOR3(0.000000, 0.924735, 0.380611),      D3DXVECTOR2(-0.500000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, 0.270598),       D3DXVECTOR3(0.269132, 0.924735, 0.269132),      D3DXVECTOR2(-0.625000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(-1.000000, -1.000000)},
	{D3DXVECTOR3(0.382683, -0.923880, 0.000000),      D3DXVECTOR3(0.380611, -0.924735, 0.000000),     D3DXVECTOR2(-0.750000, -0.125000)},
	{D3DXVECTOR3(0.270598, -0.923880, 0.270598),      D3DXVECTOR3(0.269132, -0.924735, 0.269132),     D3DXVECTOR2(-0.625000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(-1.000000, 0.000000)},
	{D3DXVECTOR3(0.270598, -0.923880, 0.270598),      D3DXVECTOR3(0.269132, -0.924735, 0.269132),     D3DXVECTOR2(-0.625000, -0.125000)},
	{D3DXVECTOR3(0.382683, -0.923880, 0.000000),      D3DXVECTOR3(0.380611, -0.924735, 0.000000),     D3DXVECTOR2(-0.750000, -0.125000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.270598, -0.923880, 0.270598),      D3DXVECTOR3(0.269132, -0.924735, 0.269132),     D3DXVECTOR2(-0.625000, -0.125000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(0.500000, -0.707107, 0.500000),      D3DXVECTOR3(0.498494, -0.709230, 0.498494),     D3DXVECTOR2(-0.625000, -0.250000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(0.653282, -0.382683, 0.653282),      D3DXVECTOR3(0.652733, -0.384551, 0.652733),     D3DXVECTOR2(-0.625000, -0.375000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.707107, 0.000000, 0.707107),       D3DXVECTOR3(0.707107, 0.000000, 0.707107),      D3DXVECTOR2(-0.625000, -0.500000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.653282, 0.382683, 0.653282),       D3DXVECTOR3(0.652733, 0.384551, 0.652733),      D3DXVECTOR2(-0.625000, -0.625000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.382683, 0.923880, 0.000000),       D3DXVECTOR3(0.380611, 0.924735, 0.000000),      D3DXVECTOR2(-0.750000, -0.875000)},
	{D3DXVECTOR3(0.500000, 0.707107, 0.500000),       D3DXVECTOR3(0.498494, 0.709230, 0.498494),      D3DXVECTOR2(-0.625000, -0.750000)},
	{D3DXVECTOR3(0.382683, 0.923880, 0.000000),       D3DXVECTOR3(0.380611, 0.924735, 0.000000),      D3DXVECTOR2(-0.750000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, 0.270598),       D3DXVECTOR3(0.269132, 0.924735, 0.269132),      D3DXVECTOR2(-0.625000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, 0.270598),       D3DXVECTOR3(0.269132, 0.924735, 0.269132),      D3DXVECTOR2(-0.625000, -0.875000)},
	{D3DXVECTOR3(0.382683, 0.923880, 0.000000),       D3DXVECTOR3(0.380611, 0.924735, 0.000000),      D3DXVECTOR2(-0.750000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(-1.000000, -1.000000)},
	{D3DXVECTOR3(0.270598, -0.923880, -0.270598),     D3DXVECTOR3(0.269132, -0.924735, -0.269132),    D3DXVECTOR2(-0.875000, -0.125000)},
	{D3DXVECTOR3(0.382683, -0.923880, 0.000000),      D3DXVECTOR3(0.380611, -0.924735, 0.000000),     D3DXVECTOR2(-0.750000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(-1.000000, 0.000000)},
	{D3DXVECTOR3(0.382683, -0.923880, 0.000000),      D3DXVECTOR3(0.380611, -0.924735, 0.000000),     D3DXVECTOR2(-0.750000, -0.125000)},
	{D3DXVECTOR3(0.270598, -0.923880, -0.270598),     D3DXVECTOR3(0.269132, -0.924735, -0.269132),    D3DXVECTOR2(-0.875000, -0.125000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.382683, -0.923880, 0.000000),      D3DXVECTOR3(0.380611, -0.924735, 0.000000),     D3DXVECTOR2(-0.750000, -0.125000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.707107, -0.707107, 0.000000),      D3DXVECTOR3(0.704977, -0.709230, 0.000000),     D3DXVECTOR2(-0.750000, -0.250000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(0.923880, -0.382683, 0.000000),      D3DXVECTOR3(0.923104, -0.384551, 0.000000),     D3DXVECTOR2(-0.750000, -0.375000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(1.000000, 0.000000, 0.000000),       D3DXVECTOR3(1.000000, 0.000000, 0.000000),      D3DXVECTOR2(-0.750000, -0.500000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.923880, 0.382683, 0.000000),       D3DXVECTOR3(0.923104, 0.384551, 0.000000),      D3DXVECTOR2(-0.750000, -0.625000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.270598, 0.923880, -0.270598),      D3DXVECTOR3(0.269132, 0.924735, -0.269132),     D3DXVECTOR2(-0.875000, -0.875000)},
	{D3DXVECTOR3(0.707107, 0.707107, 0.000000),       D3DXVECTOR3(0.704977, 0.709230, 0.000000),      D3DXVECTOR2(-0.750000, -0.750000)},
	{D3DXVECTOR3(0.270598, 0.923880, -0.270598),      D3DXVECTOR3(0.269132, 0.924735, -0.269132),     D3DXVECTOR2(-0.875000, -0.875000)},
	{D3DXVECTOR3(0.382683, 0.923880, 0.000000),       D3DXVECTOR3(0.380611, 0.924735, 0.000000),      D3DXVECTOR2(-0.750000, -0.875000)},
	{D3DXVECTOR3(0.382683, 0.923880, 0.000000),       D3DXVECTOR3(0.380611, 0.924735, 0.000000),      D3DXVECTOR2(-0.750000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, -0.270598),      D3DXVECTOR3(0.269132, 0.924735, -0.269132),     D3DXVECTOR2(-0.875000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(-1.000000, -1.000000)},
	{D3DXVECTOR3(0.000000, -0.923880, -0.382683),     D3DXVECTOR3(0.000000, -0.924735, -0.380611),    D3DXVECTOR2(-1.000000, -0.125000)},
	{D3DXVECTOR3(0.270598, -0.923880, -0.270598),     D3DXVECTOR3(0.269132, -0.924735, -0.269132),    D3DXVECTOR2(-0.875000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(-1.000000, 0.000000)},
	{D3DXVECTOR3(0.270598, -0.923880, -0.270598),     D3DXVECTOR3(0.269132, -0.924735, -0.269132),    D3DXVECTOR2(-0.875000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.923880, -0.382683),     D3DXVECTOR3(0.000000, -0.924735, -0.380611),    D3DXVECTOR2(-1.000000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(-1.000000, -0.250000)},
	{D3DXVECTOR3(0.270598, -0.923880, -0.270598),     D3DXVECTOR3(0.269132, -0.924735, -0.269132),    D3DXVECTOR2(-0.875000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(-1.000000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(-1.000000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(-1.000000, -0.375000)},
	{D3DXVECTOR3(0.500000, -0.707107, -0.500000),     D3DXVECTOR3(0.498494, -0.709230, -0.498494),    D3DXVECTOR2(-0.875000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(-1.000000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(-1.000000, -0.375000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(-1.000000, -0.500000)},
	{D3DXVECTOR3(0.653282, -0.382683, -0.653282),     D3DXVECTOR3(0.652733, -0.384551, -0.652733),    D3DXVECTOR2(-0.875000, -0.375000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(-1.000000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(-1.000000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(-1.000000, -0.625000)},
	{D3DXVECTOR3(0.707107, 0.000000, -0.707107),      D3DXVECTOR3(0.707107, 0.000000, -0.707107),     D3DXVECTOR2(-0.875000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(-1.000000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(-1.000000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(-1.000000, -0.750000)},
	{D3DXVECTOR3(0.653282, 0.382683, -0.653282),      D3DXVECTOR3(0.652733, 0.384551, -0.652733),     D3DXVECTOR2(-0.875000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(-1.000000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(-1.000000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.923880, -0.382683),      D3DXVECTOR3(0.000000, 0.924735, -0.380611),     D3DXVECTOR2(-1.000000, -0.875000)},
	{D3DXVECTOR3(0.500000, 0.707107, -0.500000),      D3DXVECTOR3(0.498494, 0.709230, -0.498494),     D3DXVECTOR2(-0.875000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.923880, -0.382683),      D3DXVECTOR3(0.000000, 0.924735, -0.380611),     D3DXVECTOR2(-1.000000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, -0.270598),      D3DXVECTOR3(0.269132, 0.924735, -0.269132),     D3DXVECTOR2(-0.875000, -0.875000)},
	{D3DXVECTOR3(0.270598, 0.923880, -0.270598),      D3DXVECTOR3(0.269132, 0.924735, -0.269132),     D3DXVECTOR2(-0.875000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, -0.382683),      D3DXVECTOR3(0.000000, 0.924735, -0.380611),     D3DXVECTOR2(-1.000000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(-1.000000, -1.000000)},
	{D3DXVECTOR3(-0.270598, -0.923880, -0.270598),    D3DXVECTOR3(-0.269132, -0.924735, -0.269132),   D3DXVECTOR2(-0.125000, -0.125000)},
	{D3DXVECTOR3(0.000000, -0.923880, -0.382683),     D3DXVECTOR3(0.000000, -0.924735, -0.380611),    D3DXVECTOR2(0.000000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(0.000000, 0.000000)},
	{D3DXVECTOR3(0.000000, -0.923880, -0.382683),     D3DXVECTOR3(0.000000, -0.924735, -0.380611),    D3DXVECTOR2(0.000000, -0.125000)},
	{D3DXVECTOR3(-0.270598, -0.923880, -0.270598),    D3DXVECTOR3(-0.269132, -0.924735, -0.269132),   D3DXVECTOR2(-0.125000, -0.125000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.923880, -0.382683),     D3DXVECTOR3(0.000000, -0.924735, -0.380611),    D3DXVECTOR2(0.000000, -0.125000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(0.000000, -0.250000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(0.000000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.707107, -0.707107),     D3DXVECTOR3(0.000000, -0.709230, -0.704977),    D3DXVECTOR2(0.000000, -0.250000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(0.000000, -0.375000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(0.000000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(0.000000, -0.382683, -0.923880),     D3DXVECTOR3(0.000000, -0.384551, -0.923104),    D3DXVECTOR2(0.000000, -0.375000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(0.000000, -0.500000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(0.000000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.000000, -1.000000),      D3DXVECTOR3(0.000000, 0.000000, -1.000000),     D3DXVECTOR2(0.000000, -0.500000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(0.000000, -0.625000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(0.000000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.382683, -0.923880),      D3DXVECTOR3(0.000000, 0.384551, -0.923104),     D3DXVECTOR2(0.000000, -0.625000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(0.000000, -0.750000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(0.000000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(-0.270598, 0.923880, -0.270598),     D3DXVECTOR3(-0.269132, 0.924735, -0.269132),    D3DXVECTOR2(-0.125000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.707107, -0.707107),      D3DXVECTOR3(0.000000, 0.709230, -0.704977),     D3DXVECTOR2(0.000000, -0.750000)},
	{D3DXVECTOR3(-0.270598, 0.923880, -0.270598),     D3DXVECTOR3(-0.269132, 0.924735, -0.269132),    D3DXVECTOR2(-0.125000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, -0.382683),      D3DXVECTOR3(0.000000, 0.924735, -0.380611),     D3DXVECTOR2(0.000000, -0.875000)},
	{D3DXVECTOR3(0.000000, 0.923880, -0.382683),      D3DXVECTOR3(0.000000, 0.924735, -0.380611),     D3DXVECTOR2(0.000000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, -0.270598),     D3DXVECTOR3(-0.269132, 0.924735, -0.269132),    D3DXVECTOR2(-0.125000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(0.000000, -1.000000)},
	{D3DXVECTOR3(-0.382683, -0.923880, 0.000000),     D3DXVECTOR3(-0.380611, -0.924735, 0.000000),    D3DXVECTOR2(-0.250000, -0.125000)},
	{D3DXVECTOR3(-0.270598, -0.923880, -0.270598),    D3DXVECTOR3(-0.269132, -0.924735, -0.269132),   D3DXVECTOR2(-0.125000, -0.125000)},
	{D3DXVECTOR3(0.000000, -1.000000, 0.000000),      D3DXVECTOR3(0.000000, -1.000000, 0.000000),     D3DXVECTOR2(0.000000, 0.000000)},
	{D3DXVECTOR3(-0.270598, -0.923880, -0.270598),    D3DXVECTOR3(-0.269132, -0.924735, -0.269132),   D3DXVECTOR2(-0.125000, -0.125000)},
	{D3DXVECTOR3(-0.382683, -0.923880, 0.000000),     D3DXVECTOR3(-0.380611, -0.924735, 0.000000),    D3DXVECTOR2(-0.250000, -0.125000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.270598, -0.923880, -0.270598),    D3DXVECTOR3(-0.269132, -0.924735, -0.269132),   D3DXVECTOR2(-0.125000, -0.125000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(-0.707107, -0.707107, 0.000000),     D3DXVECTOR3(-0.704977, -0.709230, 0.000000),    D3DXVECTOR2(-0.250000, -0.250000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-0.500000, -0.707107, -0.500000),    D3DXVECTOR3(-0.498494, -0.709230, -0.498494),   D3DXVECTOR2(-0.125000, -0.250000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(-0.923880, -0.382683, 0.000000),     D3DXVECTOR3(-0.923104, -0.384551, 0.000000),    D3DXVECTOR2(-0.250000, -0.375000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-0.653282, -0.382683, -0.653282),    D3DXVECTOR3(-0.652733, -0.384551, -0.652733),   D3DXVECTOR2(-0.125000, -0.375000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(-1.000000, 0.000000, 0.000000),      D3DXVECTOR3(-1.000000, 0.000000, 0.000000),     D3DXVECTOR2(-0.250000, -0.500000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.707107, 0.000000, -0.707107),     D3DXVECTOR3(-0.707107, 0.000000, -0.707107),    D3DXVECTOR2(-0.125000, -0.500000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(-0.923880, 0.382683, 0.000000),      D3DXVECTOR3(-0.923104, 0.384551, 0.000000),     D3DXVECTOR2(-0.250000, -0.625000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.653282, 0.382683, -0.653282),     D3DXVECTOR3(-0.652733, 0.384551, -0.652733),    D3DXVECTOR2(-0.125000, -0.625000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(-0.707107, 0.707107, 0.000000),      D3DXVECTOR3(-0.704977, 0.709230, 0.000000),     D3DXVECTOR2(-0.250000, -0.750000)},
	{D3DXVECTOR3(-0.382683, 0.923880, 0.000000),      D3DXVECTOR3(-0.380611, 0.924735, 0.000000),     D3DXVECTOR2(-0.250000, -0.875000)},
	{D3DXVECTOR3(-0.500000, 0.707107, -0.500000),     D3DXVECTOR3(-0.498494, 0.709230, -0.498494),    D3DXVECTOR2(-0.125000, -0.750000)},
	{D3DXVECTOR3(-0.382683, 0.923880, 0.000000),      D3DXVECTOR3(-0.380611, 0.924735, 0.000000),     D3DXVECTOR2(-0.250000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, -0.270598),     D3DXVECTOR3(-0.269132, 0.924735, -0.269132),    D3DXVECTOR2(-0.125000, -0.875000)},
	{D3DXVECTOR3(-0.270598, 0.923880, -0.270598),     D3DXVECTOR3(-0.269132, 0.924735, -0.269132),    D3DXVECTOR2(-0.125000, -0.875000)},
	{D3DXVECTOR3(-0.382683, 0.923880, 0.000000),      D3DXVECTOR3(-0.380611, 0.924735, 0.000000),     D3DXVECTOR2(-0.250000, -0.875000)},
	{D3DXVECTOR3(0.000000, 1.000000, 0.000000),       D3DXVECTOR3(0.000000, 1.000000, 0.000000),      D3DXVECTOR2(0.000000, -1.000000)}
};

void render::drawSphere(const D3DXVECTOR3& pos, const D3DXQUATERNION& rot, const D3DXVECTOR3& scale, texture::DXTexture* texture, texture::Material* material)
{
	static RenderGroup* rg = NULL;
	if (!rg)
	{
		short sphereIndices[336];
		for (int i = 0; i < 336; i++)
			sphereIndices[i] = i;
		rg = getRenderGroup(SPHEREFVF, sizeof(sphereVertices[0]), 336, 336, false);
		rg->primitivecount = 112;
		rg->type = D3DPT_TRIANGLELIST;
		rg->acquire();
		rg->update(sphereVertices, sphereIndices);
	}

	D3DXMATRIX transform;
	D3DXMatrixTransformation(&transform, NULL, NULL, &scale, NULL, &rot, &pos);

	rg->texture = texture;
	rg->material = material;

	render::drawGroup(rg, &transform);

	/*D3DXVECTOR3 line[2];
	D3DXVECTOR3 dir = material->light.Direction;
	line[0] = pos;
	line[1] = pos + (dir * 50);
	drawLine(line, 2, material->light.Diffuse.r, material->light.Diffuse.g, material->light.Diffuse.b);*/
}

void render::draw3DText(const string text, const D3DXVECTOR3& pos, DWORD flags)
{
	if (!font)
	{
		font = new CD3DFont("verdana", 42, D3DFONT_ZENABLE);
		font->InitDeviceObjects(render::device);
		font->RestoreDeviceObjects();
	}

	D3DXMATRIX m;
	D3DXMatrixInverse(&m, NULL, &render::view);
	m._41 = 0.0f;
	m._42 = 0.0f;
	m._43 = 0.0f;
	D3DXMATRIX scale;
	D3DXMatrixScaling(&scale, 0.1f, 0.1f, 0.1);
	D3DXMATRIX result;
	D3DXMatrixMultiply(&result, &m, &scale);
	result._41 = pos.x;
	result._42 = pos.y;
	result._43 = pos.z;
	render::device->SetTransform(D3DTS_WORLD, &result);
	font->Render3DText(text.c_str(), flags);
	render::device->SetTransform(D3DTS_WORLD, &render::world);
	render::device->SetTransform(D3DTS_VIEW, &render::view);
	render::device->SetTransform(D3DTS_PROJECTION, &render::projection);
	render::current_texture = NULL;
	render::current_lightmap = NULL;
	render::current_material = NULL;
	render::current_vb = NULL;
	render::current_ib = NULL;
	render::current_transform = render::world;
}

void render::drawPoint( const D3DXVECTOR3* point, D3DCOLOR color /*= D3DCOLOR_ARGB(255, 255, 255, 255)*/ )
{
	float pointsize = 4.0f;
	render::device->SetFVF(D3DFVF_XYZ);
	render::device->SetRenderState(D3DRS_POINTSIZE, *((DWORD*)&pointsize));
	render::device->DrawPrimitiveUP(D3DPT_POINTLIST, 1, point, sizeof(D3DXVECTOR3));
	render::current_vb = NULL;
	render::current_ib = NULL;
}

void render::drawLineSegments(const LineVertex* vertices, int count)
{
	render::device->SetRenderState(D3DRS_LIGHTING, FALSE);
	render::device->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_DISABLE);
	render::device->SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE);
	render::device->SetTransform(D3DTS_WORLD, &render::world);
	render::device->SetTransform(D3DTS_VIEW, &render::view);
	render::device->SetTransform(D3DTS_PROJECTION, &render::biased_projection);
	render::device->DrawPrimitiveUP(D3DPT_LINELIST, count, vertices, sizeof(LineVertex));
	render::device->SetTransform(D3DTS_PROJECTION, &render::projection);
	render::current_vb = NULL;
	render::current_ib = NULL;
	render::current_material = NULL;
	render::current_transform = render::world;
}

void render::drawAxis(const D3DXVECTOR3& pos, const D3DXVECTOR3& rot)
{
	D3DXMATRIX m1, m2;
	D3DXMatrixRotationYawPitchRoll(&m1, D3DXToRadian(rot.y), D3DXToRadian(rot.x), D3DXToRadian(rot.z));
	D3DXMatrixTranslation(&m2, pos.x, pos.y, pos.z);

	drawAxis(m1 * m2);
}

void render::drawAxis(const D3DXMATRIX& transform)
{
	LineVertex verts[6];
	verts[0].pos = D3DXVECTOR3(0,0,0);
	verts[0].color = D3DCOLOR_XRGB(0xff, 0, 0);
	verts[1].pos = D3DXVECTOR3(1,0,0);
	verts[1].color = D3DCOLOR_XRGB(0xff, 0, 0);
	verts[2].pos = D3DXVECTOR3(0,0,0);
	verts[2].color = D3DCOLOR_XRGB(0, 0xff, 0);
	verts[3].pos = D3DXVECTOR3(0,1,0);
	verts[3].color = D3DCOLOR_XRGB(0, 0xff, 0);
	verts[4].pos = D3DXVECTOR3(0,0,0);
	verts[4].color = D3DCOLOR_XRGB(0, 0, 0xff);
	verts[5].pos = D3DXVECTOR3(0,0,1);
	verts[5].color = D3DCOLOR_XRGB(0, 0, 0xff);

	render::device->SetRenderState(D3DRS_LIGHTING, FALSE);
	render::device->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_DISABLE);
	render::device->SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE);
	render::device->SetTransform(D3DTS_WORLD, &transform);
	render::device->SetTransform(D3DTS_VIEW, &render::view);
	render::device->SetTransform(D3DTS_PROJECTION, &render::projection);
	render::device->DrawPrimitiveUP(D3DPT_LINELIST, 3, verts, sizeof(LineVertex));
	render::current_vb = NULL;
	render::current_ib = NULL;
	render::current_material = NULL;
	render::current_transform = render::world;
}